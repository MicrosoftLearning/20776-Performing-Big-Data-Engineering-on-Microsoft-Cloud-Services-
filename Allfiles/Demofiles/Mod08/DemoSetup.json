{   
  "type": "Microsoft.StreamAnalytics/streamingjobs",
   "location":"<Location>",  
   "properties":{    
      "sku":{    
         "name":"standard"  
      },  
      "eventsOutOfOrderPolicy":"drop",  
      "eventsOutOfOrderMaxDelayInSeconds":10,  
    "inputs": [
      {
        "properties": {
          "type": "Stream",
          "datasource": {
            "type": "Microsoft.ServiceBus/EventHub",
            "properties": {
              "serviceBusNamespace": "<Event hub namespace>",
              "sharedAccessPolicyName": "RootManageSharedAccessKey",
              "sharedAccessPolicyKey":"<Event hub namespace primary key>",
              "eventHubName": "StockMarketHub",
              "consumerGroupName": "stockmarket"
            }
          },
          "serialization": {
            "type": "Json",
            "properties": {
              "encoding": "UTF8"
            }
          },
          "etag": "d33ce302-4acf-4651-9a9e-410113b391ab"
        },
        "name": "StockMarket",
        "type": "Microsoft.StreamAnalytics/streamingjobs/inputs"
      }
    ],	
    "transformation": {
      "properties": {
        "streamingUnits": 1,
        "query": "WITH\r\n     MarketData AS\r\n          (SELECT UDF.MostVolatile(Collect())\r\n               FROM\r\n                    StockMarket\r\n               GROUP BY\r\n                    TumblingWindow(Minute, 2))\r\n\r\nSELECT\r\n     System.Timestamp AS Time, GetRecordPropertyValue(MostVolatile, 'Ticker') AS Ticker, GetRecordPropertyValue(MostVolatile, 'NumChanges') AS NumChanges, GetRecordPropertyValue(MostVolatile, 'MaxPrice') AS MaxPrice, GetRecordPropertyValue(MostVolatile, 'MinPrice') AS MinPrice\r\nINTO\r\n     VolatileStocks\r\nFROM\r\n     MarketData   \r\n\r\nSELECT\r\n     Ticker, Price, DATEPART(hour, QuoteTime) AS HourOfDay\r\nINTO\r\n     StockMarketData\r\nFROM\r\n     StockMarket  "
      },
      "name": "Transformation",
      "type": "Microsoft.StreamAnalytics/streamingjobs/transformations"
    },	
   "outputs": [
      {
        "properties": {
          "datasource": {
            "type": "Microsoft.Storage/Blob",
            "properties": {
              "storageAccounts": [
                {
                  "accountName": "<Storage account name>",
				  "accountKey": "<Storage account key>"
                }
              ],
              "container": "stocks",
              "pathPattern": "",
              "dateFormat": "yyyy/MM/dd",
              "timeFormat": "HH"
            }
          },
          "serialization": {
            "type": "Csv",
            "properties": {
              "fieldDelimiter": ",",
              "encoding": "UTF8"
            }
          },
        },
         "name": "MostVolatile",
        "type": "Microsoft.StreamAnalytics/streamingjobs/outputs"
      }
    ],
    "functions": [
      {
        "properties": {
          "type": "Scalar",
          "properties": {
            "inputs": [
              {
                "dataType": "any"
              }
            ],
            "output": {
              "dataType": "record"
            },
            "binding": {
              "type": "Microsoft.StreamAnalytics/JavascriptUdf",
              "properties": {
                "script": "// UDF that returns the most volatile stock item recorded during the current time window\nfunction main(stockPriceChanges) {\n    var stockItems = [];\n    \n    // Iterate through the records in the array and organize the data as a collection of price changes for each distinct ticker\n    stockPriceChanges.forEach(\n        function(item, index, array) {\n\n            // Retrieve the data of interest from the array item\n            var ticker = item.Ticker;\n            var price = item.Price;\n\n            // Check whether an existing record already exists in the stockItems array for this ticker\n            var existingRecord = findStockItemRecords(ticker, stockItems);\n\n            // If not, create a new record\n            if (!existingRecord) {                \n                stockItems.push({Ticker: ticker, Prices: []});\n                existingRecord = stockItems[stockItems.length - 1];\n            } \n\n            // Add the price information to the record for this ticke\n            existingRecord.Prices.push(price);\n        }\n    );\n\n    var mostVolatileTicker = \"\";\n    var maxPrice = 0;\n    var minPrice = 0;\n    var numChanges = 10; // Minimum number of price changes to consider\n\n    // Now find which item is the most volatile\n    for (var i = 0; i < stockItems.length; i++) {\n        var itemPriceChanges = stockItems[i].Prices.length;\n        if (itemPriceChanges >= numChanges) {\n            numChanges = itemPriceChanges;\n            var possMaxPrice = stockItems[i].Prices[0];\n            var possMinPrice = stockItems[i].Prices[0];\n            for (var j = 1; j < itemPriceChanges; j++) {\n\n                if (stockItems[i].Prices[j] >= possMaxPrice) {\n                    possMaxPrice = stockItems[i].Prices[j]; \n                }\n\n                if (stockItems[i].Prices[j] <= possMaxPrice) {\n                    possMinPrice = stockItems[i].Prices[j]; \n                }\n\n                if (possMaxPrice - possMinPrice >= maxPrice - minPrice) {\n                    maxPrice = possMaxPrice;\n                    minPrice = possMinPrice;\n                    mostVolatileTicker = stockItems[i].Ticker;\n                }\n            }\n        }\n    }\n\n    return {Ticker: mostVolatileTicker, NumChanges: numChanges, MaxPrice: maxPrice, MinPrice: minPrice};\n}\n\n// Check to see whether a record for the specified ticker already exists, and if so, return it\nfunction findStockItemRecords(ticker, array) {\n    \n    for(var i = 0; i < array.length; i++) {\n        if (array[i].Ticker === ticker) {\n            return array[i];\n        }\n    }\n\n    return null;\n}"
              }
            }
          },
        },
        "name": "MostVolatile",
        "type": "Microsoft.StreamAnalytics/streamingjobs/functions"
      }
    ]
   }  
}